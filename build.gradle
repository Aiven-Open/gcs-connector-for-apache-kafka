/*
 * Copyright 2020 Aiven Oy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id 'java-library'

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id 'distribution'

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'
}

group = "io.aiven"
version = System.getenv("RELEASE_VERSION") ?: "0-SNAPSHOT"

repositories {
    mavenLocal()
    jcenter()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/aiven/aiven-kafka-connect-commons")
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

sourceCompatibility = "8"
targetCompatibility = "8"

ext {
    kafkaVersion = "1.1.0"
    aivenConnectCommonsVersion = "0.0.14"
    testcontainersVersion = "1.12.0"
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath
        }
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compileOnly "org.apache.kafka:connect-api:$kafkaVersion"
    compileOnly "org.apache.kafka:connect-runtime:$kafkaVersion"

    implementation("com.google.cloud:google-cloud-storage:1.64.0") {
        exclude group: "com.google.guava", module: "guava"
    }

    implementation "com.google.guava:guava:27.1-jre"

    implementation "org.xerial.snappy:snappy-java:1.1.7.5"
    implementation "com.github.luben:zstd-jni:1.4.5-4"

    implementation "io.aiven:aiven-kafka-connect-commons:$aivenConnectCommonsVersion"

    implementation "org.slf4j:slf4j-api:1.7.25"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.1'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation "net.jqwik:jqwik:1.1.5"

    // is provided by "jqwik", but need this in testImplementation scope
    testImplementation "net.jqwik:jqwik-engine:1.1.5"

    testImplementation "org.apache.kafka:connect-api:$kafkaVersion"
    testImplementation "org.apache.kafka:connect-runtime:$kafkaVersion"
    testImplementation 'com.google.cloud:google-cloud-nio:0.84.0-alpha'
    testImplementation  'org.mockito:mockito-core:3.3.3'
    testImplementation "io.aiven:aiven-kafka-connect-commons:$aivenConnectCommonsVersion"

    testRuntime 'ch.qos.logback:logback-classic:1.2.3'

    integrationTestImplementation "org.apache.kafka:connect-api:$kafkaVersion"
    integrationTestImplementation "org.apache.kafka:connect-runtime:$kafkaVersion"
    integrationTestImplementation "org.apache.kafka:connect-json:$kafkaVersion"
    integrationTestImplementation "org.apache.kafka:connect-transforms:$kafkaVersion"

    integrationTestImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    integrationTestImplementation "org.testcontainers:kafka:$testcontainersVersion" // this is not Kafka version
    // Make test utils from 'test' available in 'integration-test'
    integrationTestImplementation sourceSets.test.output

    integrationTestImplementation "io.aiven:aiven-kafka-connect-commons:$aivenConnectCommonsVersion"
}

checkstyle {
    toolVersion "8.21"
    configDir rootProject.file("checkstyle/")
    println configFile
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    dependsOn test, distTar

    useJUnitPlatform()

    // Run always.
    outputs.upToDateWhen { false }

    // Pass the GCS credentials path to the tests.
    if (project.hasProperty('gcsCredentialsPath')) {
        systemProperty("integration-test.gcs.credentials.path", project.findProperty('gcsCredentialsPath'))
    }
    // Pass the GCS credentials JSON to the tests.
    if (project.hasProperty('gcsCredentialsJson')) {
        systemProperty("integration-test.gcs.credentials.json", project.findProperty('gcsCredentialsJson'))
    }
    // Pass the GCS bucket name to the tests.
    systemProperty("integration-test.gcs.bucket", project.findProperty('testGcsBucket'))
    // Pass the distribution file path to the tests.
    systemProperty("integration-test.distribution.file.path", distTar.archiveFile.get().asFile.path)

    doFirst {
        assert project.findProperty('testGcsBucket') != null
        assert !(project.findProperty('testGcsBucket').allWhitespace)
    }
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'jqwik'
    }
}

processResources {
    filesMatching('aiven-kafka-connect-gcs-version.properties') {
        expand(version: version)
    }
}

jar {
    manifest {
        attributes(
                'Version': "$version"
        )
    }
}
